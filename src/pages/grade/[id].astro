---
import Layout from '../../layouts/Layout.astro';
import { getPlatformsForGrade } from '../../data/platforms';
import SearchFilter from '../../components/SearchFilter.astro';
import SubjectGroups from '../../components/SubjectGroups.astro';
import GradeNavigation from '../../components/GradeNavigation.astro';


export function getStaticPaths() {
	return [
		{params: {id: '0'}}, {params: {id: '1'}}, {params: {id: '2'}},
		{params: {id: '3'}}, {params: {id: '4'}}, {params: {id: '5'}},
		{params: {id: '6'}}, {params: {id: '7'}}, {params: {id: '8'}},
		{params: {id: '9'}}, {params: {id: '10'}}
	];
}

const { id } = Astro.params;
const grade = parseInt(id);
const platforms = getPlatformsForGrade(grade);
const publishers = [...new Set(platforms.map(p => p.publisher))].filter(Boolean);
---

<Layout title={`${grade}. årgang - Digitale Læremidler`}>
	<div class="mb-6">
		<a href="/portaler" class="text-primary hover:underline">&larr; Tilbage til oversigt</a>
	</div>
	
	<h2 class="text-2xl font-bold text-gray-900 mb-6">{grade}. årgang - Tilgængelige Platforme</h2>
	
	<GradeNavigation currentGrade={grade} />
	
	<div class="mb-8">
		<SearchFilter publishers={publishers} />
	</div>

	<div id="platforms-container">
		<SubjectGroups platforms={platforms} currentGrade={grade} />
	</div>
</Layout>

<script>
// Client-side filtering logic
let platforms = document.querySelectorAll('[data-platform-card]');
const searchInput = document.querySelector('#platform-search') as HTMLInputElement;
const publisherSelect = document.querySelector('#publisher-filter') as HTMLSelectElement;

function filterPlatforms() {
	const searchTerm = searchInput?.value.toLowerCase() || '';
	const selectedPublisher = publisherSelect?.value || '';

	platforms.forEach(platform => {
		const name = platform.querySelector('h3')?.textContent?.toLowerCase() || '';
		const publisher = platform.querySelector('[data-publisher]')?.textContent || '';
		
		const matchesSearch = name.includes(searchTerm);
		const matchesPublisher = !selectedPublisher || publisher === selectedPublisher;
		
		(platform as HTMLElement).style.display = matchesSearch && matchesPublisher ? 'block' : 'none';
	});

	// Hide empty subject groups
	document.querySelectorAll('.subject-group').forEach(group => {
		const visiblePlatforms = group.querySelectorAll('[data-platform-card]');
		const hasVisiblePlatforms = Array.from(visiblePlatforms).some(p => (p as HTMLElement).style.display !== 'none');
		(group as HTMLElement).style.display = hasVisiblePlatforms ? 'block' : 'none';
	});
}

searchInput?.addEventListener('input', filterPlatforms);
publisherSelect?.addEventListener('change', filterPlatforms);
</script>
