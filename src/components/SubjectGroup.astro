---
import type { CollectionEntry } from 'astro:content';
import PlatformCard from './PlatformCard.astro';
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';

interface Props {
	subject: string;
	platforms: CollectionEntry<'platforms'>[];
	currentGrade?: number;
}

const { subject, platforms: unsortedPlatforms, currentGrade } = Astro.props;

// Sort platforms alphabetically by name
const platforms = [...unsortedPlatforms].sort((a, b) => 
	a.data.name.localeCompare(b.data.name, 'da')
);

// Get subject data for icon lookup
const subjects = await getCollection('subjects');
const subjectData = subjects.find(s => s.data.displayName === subject)?.data;

// Validate icon format if present
let icon = { name: 'ph:folder-fill', color: 'text-gray-500' };
if (subjectData?.icon) {
	const { name, color } = subjectData.icon;
	// Validate icon name format
	if (!name.startsWith('ph:') || !name.endsWith('-fill')) {
		console.warn(`Subject "${subject}" has invalid icon name "${name}". Using fallback.`);
	} 
	// Validate color format
	else if (!color.startsWith('text-') || !color.includes('-')) {
		console.warn(`Subject "${subject}" has invalid color format "${color}". Using fallback.`);
	}
	else {
		icon = { name, color };
	}
}

---

<div class="bg-white rounded-lg shadow-sm p-6 subject-group animate-fade-in">
	<h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-3">
		<div class="w-6 flex-shrink-0">
			<Icon name={icon.name} class={`w-6 h-6 ${icon.color}`} />
		</div>
		<span>{subject}</span>
	</h3>
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
		{platforms.map((platform, index) => (
			<div class={`stagger-item stagger-visible delay-${(index % 5) + 1}`}>
				<PlatformCard
					platform={platform}
					currentGrade={currentGrade}
				/>
			</div>
		))}
	</div>
</div>