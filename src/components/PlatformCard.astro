---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import Tooltip from './Tooltip.astro';
import { getCollection } from 'astro:content';

type Platform = CollectionEntry<'platforms'>;
type Publisher = 'Gyldendal' | 'Alinea' | 'Dansk LF' | 'JH Software' | 'Andre';

interface Props {
	platform: Platform;
	currentGrade?: number;
}

const { platform, currentGrade } = Astro.props;
const { name, publisher, grades, url, description, longDescription, subject } = platform.data;

// Get all subjects for icon lookup
const subjects = await getCollection('subjects');
const subjectMap = new Map(subjects.map(s => [s.data.name, s.data]));

// Validate that the subject exists
const subjectData = subjectMap.get(subject);
if (!subjectData) {
	console.error(`Platform "${name}" references non-existent subject "${subject}"`);
}

const publisherColors: Record<Publisher | 'default', string> = {
	'Gyldendal': 'bg-accent-light text-primary',
	'Alinea': 'bg-rose-light text-rose-dark',
	'Dansk LF': 'bg-blue-light text-blue-dark',
	'JH Software': 'bg-emerald-light text-emerald-dark',
	'Andre': 'bg-neutral-light text-secondary',
	'default': 'bg-neutral-light text-secondary'
};

const publisherColor = publisherColors[publisher as Publisher] || publisherColors.default;

const publisherIcons: Record<Publisher, { src: string; height: number }> = {
	'Gyldendal': { src: '/gyldendal_icon.svg', height: 16 },
	'Alinea': { src: '/alinea_icon.svg', height: 6 },
	'Dansk LF': { src: '', height: 0 },
	'JH Software': { src: '', height: 0 },
	'Andre': { src: '', height: 0 }
};

function getPlatformIcon(platform: Platform, subject: string): { name: string; color: string } {
	try {
		// Check for platform icon override first
		if (platform.data.iconOverwrite && platform.data.icon?.name && platform.data.icon?.color) {
			return platform.data.icon;
		}
		
		// Get subject data and icon
		const subjectData = subjectMap.get(subject);
		if (subjectData?.icon) {
			return subjectData.icon;
		}

		throw new Error('No valid icon found');
	} catch (error: unknown) {
		const errorMessage = error instanceof Error ? error.message : 'Unknown error';
		console.warn(`Failed to get icon for platform "${platform.data.name}": ${errorMessage}`);
		// Default fallback
		return { name: 'ph:app-window-fill', color: 'text-gray-500' };
	}
}

const platformIcon = getPlatformIcon(platform, subject);

const publisherIcon = publisherIcons[publisher as Publisher];
const hasPublisherIcon = publisherIcon && publisherIcon.src !== '';

---

<a 
	href={url} 
	target="_blank" 
	rel="noopener noreferrer" 
	class={`platform-card block transition-all duration-300 hover:scale-[1.02] hover:shadow-md h-[240px] flex flex-col p-4 bg-white rounded-lg ${url ? 'cursor-pointer' : 'cursor-default pointer-events-none'}`} 
	data-platform-card
>
	<div class="flex flex-wrap justify-between items-start gap-2 min-h-[48px]">
		<div class="flex items-start gap-2 flex-1 min-w-0 max-w-[calc(100%-90px)]">
			<div class="w-5 flex-shrink-0 mt-[3px]">
				<Icon 
					name={platformIcon.name} 
					class={`w-5 h-5 ${platformIcon.color}`} 
				/>
			</div>
			<h3 class="text-lg font-semibold text-primary hover:text-accent-dark transition-colors line-clamp-2 min-w-0">{name}</h3>
		</div>
		{publisher && (
			<span class={`px-2 py-1 text-sm font-medium rounded-full ${publisherColor} flex items-center gap-1.5 flex-shrink-0 whitespace-nowrap self-start`} data-publisher={publisher}>
				<span class="truncate max-w-[50px] sm:max-w-[80px]">{publisher}</span>
				{hasPublisherIcon && (
					<Image 
						src={publisherIcon.src}
						alt={`${publisher} icon`}
						height={publisherIcon.height}
						width={24}
						class={`w-auto inline-block min-w-[14px] object-contain ${
							publisher === 'Alinea' 
								? 'h-2 max-h-[6px]' 
								: 'h-3.5 max-h-[16px]'
						}`}
					/>
				)}
			</span>
		)}
	</div>
	
	{description && (
		<div class="flex-grow">
			<Tooltip content={longDescription}>
				<p class="text-sm text-gray-600 mt-3 line-clamp-2">{description}</p>
			</Tooltip>
		</div>
	)}

	
	{grades.length > 0 && (
		<div class="flex flex-wrap gap-2 mt-4 overflow-y-auto max-h-[100px] scrollbar-thin scrollbar-thumb-gray-200 scrollbar-track-transparent">
			{grades.map((grade: number) => (
				<span class={`px-2 py-1 text-xs rounded-full flex-shrink-0 ${
					currentGrade === grade 
						? 'bg-accent-light text-primary font-medium' 
						: 'bg-neutral-light text-secondary'
				}`}>
					{grade}. Ã¥rgang
				</span>
			))}
		</div>
	)}
</a>

<style>
	.platform-card {
		position: relative;
	}
</style>
