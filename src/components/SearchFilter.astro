---
interface Props {
	publishers: string[];
}

const { publishers } = Astro.props;
---

<div class="bg-white/80 backdrop-blur-xs p-6 rounded-lg shadow-xs mb-6 border border-neutral">
	<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
		<div>
			<label for="platform-search" class="block text-sm font-medium text-secondary mb-2">
				SÃ¸g efter platform
			</label>
			<input
				type="search"
				id="platform-search"
				class="w-full px-4 py-2 border border-neutral rounded-md focus:ring-2 focus:ring-primary focus:border-primary bg-neutral-lightest"
				placeholder="Indtast platformnavn..."
			/>
		</div>
		
		<div>
			<label for="publisher-filter" class="block text-sm font-medium text-secondary mb-2">
				Filtrer efter udgiver
			</label>
			<select
				id="publisher-filter"
				class="w-full px-4 py-2 border border-neutral rounded-md focus:ring-2 focus:ring-primary focus:border-primary bg-neutral-lightest"
			>
				<option value="">Alle udgivere</option>
				{publishers.map(publisher => (
					<option value={publisher}>{publisher}</option>
				))}
			</select>
		</div>
	</div>
</div>

<script>
	const searchInput = document.getElementById('platform-search') as HTMLInputElement;
	const publisherSelect = document.getElementById('publisher-filter') as HTMLSelectElement;
	const platformCards = document.querySelectorAll('[data-platform-card]');

	function filterPlatforms() {
		const searchTerm = searchInput.value.toLowerCase();
		const selectedPublisher = publisherSelect.value;

		platformCards.forEach(card => {
			const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
			const publisherElement = card.querySelector('[data-publisher]');
			const publisher = publisherElement?.getAttribute('data-publisher') || '';
			
			const matchesSearch = title.includes(searchTerm);
			const matchesPublisher = !selectedPublisher || selectedPublisher === publisher;

			if (matchesSearch && matchesPublisher) {
				card.classList.remove('hidden');
				const group = card.closest('.subject-group');
				if (group) group.classList.remove('hidden');
			} else {
				card.classList.add('hidden');
				const group = card.closest('.subject-group');
				if (group) {
					const hasVisibleCards = Array.from(group.querySelectorAll('[data-platform-card]'))
						.some(c => !c.classList.contains('hidden'));
					if (!hasVisibleCards) {
						group.classList.add('hidden');
					}
				}
			}
		});
	}

	// Initial filter to ensure proper state
	filterPlatforms();

	searchInput.addEventListener('input', filterPlatforms);
	publisherSelect.addEventListener('change', filterPlatforms);
</script>