name: Process New Platform Request

on:
  issues:
    types: [opened]

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    steps:
      - name: Check Username
        run: |
          echo "Expected username: edbpede"
          echo "Actual username: ${{ github.event.issue.user.login }}"
          echo "Username matches: ${{ github.event.issue.user.login == 'edbpede' }}"

      - name: Check Labels
        run: |
          echo "Labels on issue:"
          echo "${{ toJSON(github.event.issue.labels) }}"
          echo "Has platform-request label: ${{ contains(github.event.issue.labels.*.name, 'platform-request') }}"

  create-platform:
    needs: check-conditions
    if: |
      github.event.issue.user.login == 'edbpede' &&
      contains(github.event.issue.labels.*.name, 'platform-request')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Debug Event Info
        run: |
          echo "Issue Creator: ${{ github.event.issue.user.login }}"
          echo "Issue Labels: ${{ toJSON(github.event.issue.labels.*.name) }}"
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Number: ${{ github.event.issue.number }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Issue Form
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Starting to parse issue form...');
            const body = context.payload.issue.body;
            console.log('Issue body:', body);
            
            const lines = body.split('\n');
            
            const getData = (field) => {
              console.log(`Looking for field: ${field}`);
              const line = lines.find(l => l.includes(`### ${field}`));
              if (!line) {
                // Try finding by emoji label if header not found
                const emojiLine = lines.find(l => l.includes(`📚 ${field}`) || 
                                                 l.includes(`🏢 ${field}`) || 
                                                 l.includes(`🔗 ${field}`) || 
                                                 l.includes(`📖 ${field}`) || 
                                                 l.includes(`📝 ${field}`) || 
                                                 l.includes(`📋 ${field}`));
                if (!emojiLine) {
                  console.log(`Field not found: ${field}`);
                  return '';
                }
                const value = lines[lines.indexOf(emojiLine) + 2].trim();
                console.log(`Found value for ${field} with emoji:`, value);
                return value;
              }
              const value = lines[lines.indexOf(line) + 2].trim();
              console.log(`Found value for ${field}:`, value);
              return value;
            };
            
            const getGrades = () => {
              console.log('Parsing grades section...');
              
              // Find the grades section
              let gradeSection = '';
              let inGradeSection = false;
              
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                if (line.includes('### Vælg klassetrin')) {
                  inGradeSection = true;
                  continue;
                }
                if (inGradeSection) {
                  if (line.startsWith('###')) {
                    break;
                  }
                  gradeSection += line + '\n';
                }
              }
              
              console.log('Grade section:', gradeSection);
              
              const grades = [];
              gradeSection.split('\n').forEach(line => {
                if (line.includes('[x]')) {
                  // Extract grade number from the format "🎓 X. klasse"
                  const match = line.match(/🎓\s*(\d+)\./);
                  if (match) {
                    const grade = parseInt(match[1], 10);
                    console.log(`Found selected grade: ${grade}`);
                    grades.push(grade);
                  }
                }
              });
              
              console.log('Final grades array:', grades);
              return grades;
            };
            
            console.log('Building platform data object...');
            const platformData = {
              name: getData('Platformnavn'),
              publisher: getData('Udgiver'),
              url: getData('Platform URL'),
              subject: getData('Fag'),
              description: getData('Kort beskrivelse'),
              longDescription: getData('Detaljeret beskrivelse'),
              grades: getGrades(),
              isActive: true
            };
            
            console.log('Platform data:', platformData);
            
            // Sanitize publisher name for directory
            const publisherDir = platformData.publisher
              .toLowerCase()
              .replace(/[^a-z0-9]/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '');
            
            console.log('Sanitized publisher directory:', publisherDir);
            
            // Create JSON content
            const jsonContent = JSON.stringify(platformData, null, 2);
            
            core.setOutput('publisher-dir', publisherDir);
            core.setOutput('platform-data', jsonContent);
            core.setOutput('platform-name', platformData.name);
            
            console.log('Successfully set all outputs');

      - name: Debug Platform Data
        run: |
          echo "Platform Name: '${{ fromJson(steps.parse-issue.outputs.platform-data).name }}'"
          echo "Publisher Directory: '${{ steps.parse-issue.outputs.publisher-dir }}'"
          echo "Platform Data:"
          echo '${{ steps.parse-issue.outputs.platform-data }}'

      - name: Check for duplicates
        id: check-duplicates
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Parse the platform data safely
            let platformData;
            try {
              platformData = JSON.parse(process.env.PLATFORM_DATA);
            } catch (error) {
              core.setFailed(`Failed to parse platform data: ${error.message}`);
              return false;
            }
            
            const newName = platformData.name.toLowerCase();
            const newUrl = platformData.url.toLowerCase();
            
            // Function to recursively get all JSON files
            function getAllJsonFiles(dir) {
              let results = [];
              const items = fs.readdirSync(dir);
              
              for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                  results = results.concat(getAllJsonFiles(fullPath));
                } else if (item.endsWith('.json')) {
                  results.push(fullPath);
                }
              }
              
              return results;
            }
            
            // Check all platform JSON files
            const platformsDir = 'src/content/platforms';
            const jsonFiles = getAllJsonFiles(platformsDir);
            let duplicateFound = false;
            let errorMessage = '';
            
            for (const file of jsonFiles) {
              const content = fs.readFileSync(file, 'utf8');
              let platform;
              try {
                platform = JSON.parse(content);
              } catch (error) {
                console.warn(`Failed to parse ${file}: ${error.message}`);
                continue;
              }
              
              if (platform.name && platform.name.toLowerCase() === newName) {
                duplicateFound = true;
                errorMessage = `Platform with name "${platformData.name}" already exists in ${file}`;
                break;
              }
              
              if (platform.url && platform.url.toLowerCase() === newUrl) {
                duplicateFound = true;
                errorMessage = `Platform with URL "${platformData.url}" already exists in ${file}`;
                break;
              }
            }
            
            if (duplicateFound) {
              core.setFailed(errorMessage);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ Error: ${errorMessage}\n\nPlease check the existing platforms and submit a new request with a unique name and URL.`
              });
              return false;
            }
            
            return true;
          env:
            PLATFORM_DATA: ${{ steps.parse-issue.outputs.platform-data }}

      - name: Verify publisher directory
        id: verify-publisher
        if: success()
        run: |
          PUBLISHER_DIR="src/content/platforms/${{ steps.parse-issue.outputs.publisher-dir }}"
          
          if [ ! -d "$PUBLISHER_DIR" ]; then
            echo "Publisher directory does not exist. Creating: $PUBLISHER_DIR"
            mkdir -p "$PUBLISHER_DIR"
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "Publisher directory already exists: $PUBLISHER_DIR"
            echo "created=false" >> $GITHUB_OUTPUT
          fi

      - name: Create platform file
        if: steps.verify-publisher.outputs.created == 'true' || steps.verify-publisher.outputs.created == 'false'
        run: |
          echo "Creating directory structure..."
          mkdir -p src/content/platforms/${{ steps.parse-issue.outputs.publisher-dir }}

          # Convert platform name to kebab-case for filename
          PLATFORM_NAME=$(echo "${{ fromJson(steps.parse-issue.outputs.platform-data).name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//')
          
          echo "Writing platform data to file..."
          echo '${{ steps.parse-issue.outputs.platform-data }}' > src/content/platforms/${{ steps.parse-issue.outputs.publisher-dir }}/${PLATFORM_NAME}.json

          echo "Platform file created successfully"
          ls -la src/content/platforms/${{ steps.parse-issue.outputs.publisher-dir }}

      - name: Configure git
        run: |
          echo "Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat(platform): tilføj ${{ fromJson(steps.parse-issue.outputs.platform-data).name }}"
          title: "✨ Tilføj platform: ${{ fromJson(steps.parse-issue.outputs.platform-data).name }}"
          body: |
            ## Ny platform tilføjet

            Denne PR er automatisk genereret fra issue #${{ github.event.issue.number }}.

            ### Platform detaljer
            - **Navn**: ${{ fromJson(steps.parse-issue.outputs.platform-data).name }}
            - **Udgiver**: ${{ steps.parse-issue.outputs.publisher-dir }}
            - **Issue**: #${{ github.event.issue.number }}

            ### Tjekliste
            - [ ] Platform data er korrekt formateret
            - [ ] URL er gyldig og tilgængelig
            - [ ] Klassetrin er korrekte
            - [ ] Fagkategorisering er korrekt

            ### Forhåndsvisning
            ```json
            ${{ steps.parse-issue.outputs.platform-data }}
            ```

            Lukker #${{ github.event.issue.number }}
          labels: |
            platform
            automated-pr
          base: main
          delete-branch: true
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.event.issue.user.login }} <${{ github.event.issue.user.login }}@users.noreply.github.com>

      - name: Debug Pull Request Creation
        run: |
          echo "Pull Request Operation: ${{ steps.create-pr.outputs.pull-request-operation }}"
          echo "Pull Request Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "Pull Request URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "Current git status:"
          git status
          echo "Git log:"
          git log -n 3

      - name: Show PR Result
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "Pull Request created successfully!"
          echo "PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"

      - name: Add Comment to Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Tak for din indsendelse af en ny platform! 🎉
            
            Jeg har oprettet en pull request for at tilføje denne platform. Du kan gennemgå den her: ${{ steps.create-pr.outputs.pull-request-url }}
            
            Denne issue vil automatisk blive lukket, når PR'en er merged.
